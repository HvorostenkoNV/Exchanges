@startuml

namespace Main.Exchange{
    class Exchange << (S,#CC0000) Singleton >>{
        +run() : void
    }
}

namespace Main.Exchange.DataProcessors{
    class Manager{
        +{static}getProcessor(string $processorName) : Processor
        +{static}getProcessorsList() : array|Processor
    }

    interface Processor{
        +__construct(Main.Exchange.Procedures.Procedure $procedure)
        +getProcedure() : Main.Exchange.Procedures.Procedure
        +getResult() : Main.Exchange.DataProcessors.Results.Result
        +setResult(Main.Exchange.DataProcessors.Results.Result $result) : void
        +process() : void
    }

    abstract AbstractProcessor{
        +__construct(Main.Exchange.Procedures.Procedure $procedure)
        +getProcedure() : Main.Exchange.Procedures.Procedure
        +getResult() : Main.Exchange.DataProcessors.Results.Result
        #setResult(Main.Exchange.DataProcessors.Results.Result $result) : void
        +{abstract}process() : void
    }

    class Collector{
        -result : CollectorResult
        +process() : void
    }

    class Matcher{
        -result : MatcherResult
        -collectedData : CollectorResult
        +setCollectedData(CollectorResult $data) : void
        +process() : void
    }

    class Combiner{
        -result : CombinerResult
        -matchedData : MatcherResult
        +setMatchedData(MatcherResult $data) : void
        +process() : void
    }

    class Provider{
        -result : ProviderResult
        -combinedData : CombinerResult
        +setCombinedData(CombinerResult $data) : void
        +process() : void
    }

    Processor - Manager
    Processor <|-- AbstractProcessor
    AbstractProcessor <|-- Collector
    AbstractProcessor <|-- Matcher
    AbstractProcessor <|-- Combiner
    AbstractProcessor <|-- Provider
}

namespace Main.Exchange.DataProcessors.Results{
    interface Result{
    }

    class CollectorResult{
        +__construct(array $data)
        +getData(string $participantClassName) : array
    }

    class MatcherResult{
        +__construct(array $data)
        +getGeneralId(string $participantClassName, int $id) : int
        +getParticipantId(int $generalId) : int
    }

    class CombinerResult{
        +__construct(array $data)
        +getData() : array
    }

    class ProviderResult{

    }

    Result <|-- CollectorResult
    Result <|-- MatcherResult
    Result <|-- CombinerResult
    Result <|-- ProviderResult

    note bottom of CollectorResult
        data structure:
        [
            ParticipantClassName =>
            [
                ParticipantItemId =>
                [
                    field => value,
                    field => value
                ],
                ParticipantItemId =>
                [
                    field => value,
                    field => value
                ]
            ]
        ]
    endnote

    note bottom of MatcherResult
        data structure:
        [
            generalItemId =>
            [
                ParticipantClassName => itemId,
                ParticipantClassName => itemId
            ]
        ]
    endnote

    note bottom of CombinerResult
        data structure:
        [
            generalItemId =>
            [
                field => value,
                field => value
            ],
            generalItemId =>
            [
                field => value,
                field => value
            ]
        ]
    endnote

    note bottom of ProviderResult
        ???
    endnote
}

namespace Main.Exchange.Procedures{
    class Manager{
        +{static}getProcedure(string $procedureName) : Procedure
        +{static}getProceduresList() : array|Procedure
        +{static}addProcedure(Params $params) : boolean
        +{static}deleteProcedure(string $procedureName) : boolean
        +{static}changeProcedure(string $procedureName, Params $params) : boolean
    }

    interface Procedure{
        +__construct(array $participants, Params $params)
        +getParticipants() : array|Main.Exchange.Participants.Participant
        +getParams() : Params
    }

    abstract AbstractProcedure{
        -participants : array|Main.Exchange.Participants.Participant
        -params : Params
        +__construct(array $participants, Params $params)
        +getParticipants() : array|Main.Exchange.Participants.Participant
        +getParams() : Params
    }

    class UsersExchangeProcedure{

    }

    class Params{
        -name : array
        -fieldsMatching : array
        +__construct(array $data)
        +getName() : string
        +getFieldsMatching() : array
    }

    Manager - Procedure
    Procedure <|-- AbstractProcedure
    AbstractProcedure <|-- UsersExchangeProcedure

    Procedure *-- "one" Params
}

namespace Main.Exchange.Participants{
    interface Participant{
        +getProvidedData() : Data.ProvidedData
        +getFieldsParams() : Data.FieldsParams
        +getMatchingRules() : Data.MatchingRules
        +getCombiningRules() : Data.CombiningRules
        +provideData(Data.DeliveredData $data) : boolean

        -readProvidedData() : Data.ProvidedData
        -writeDeliveredData(Data.DeliveredData $data) : boolean
    }

    abstract AbstractParticipants{
        +getProvidedData() : Data.ProvidedData
        +getFieldsParams() : Data.FieldsParams
        +getMatchingRules() : Data.MatchingRules
        +getCombiningRules() : Data.CombiningRules
        +provideData(Data.DeliveredData $data) : boolean

        -readXml(string $path) : Data.ProvidedData
        -readBD(array $connectionParams) : Data.ProvidedData

        -{abstract}readProvidedData() : Data.ProvidedData
        -{abstract}writeDeliveredData(Data.DeliveredData $data) : boolean
    }

    class 1CUsers{
        -readProvidedData() : ProvidedData
        -writeDeliveredData(DeliveredData $data) : boolean
    }

    class ADUsers{
        -readProvidedData() : ProvidedData
        -writeDeliveredData(DeliveredData $data) : boolean
    }

    class BitrixUsers{
        -readProvidedData() : ProvidedData
        -writeDeliveredData(DeliveredData $data) : boolean
    }

    Participant <|-- AbstractParticipants
    AbstractParticipants <|-- 1CUsers
    AbstractParticipants <|-- ADUsers
    AbstractParticipants <|-- BitrixUsers
}

namespace Main.Exchange.Participants.Data{
    interface Data{

    }

    class ProvidedData{

    }

    class DeliveredData{

    }

    abstract FieldsParams{

    }

    abstract MatchingRules{

    }

    abstract CombiningRules{

    }

    class 1CUsersFieldsParams{

    }

    class ADUsersFieldsParams{

    }

    class BitrixUsersFieldsParams{

    }

    Data <|-- ProvidedData
    Data <|-- DeliveredData
    Data <|-- FieldsParams
    Data <|-- MatchingRules
    Data <|-- CombiningRules

    FieldsParams <|-- 1CUsersFieldsParams
    FieldsParams <|-- ADUsersFieldsParams
    FieldsParams <|-- BitrixUsersFieldsParams

    MatchingRules <|-- 1CUsersMatchingRules
    MatchingRules <|-- ADUsersMatchingRules
    MatchingRules <|-- BitrixUsersMatchingRules

    CombiningRules <|-- 1CUsersCombiningRules
    CombiningRules <|-- ADUsersCombiningRules
    CombiningRules <|-- BitrixUsersCombiningRules
}

Main.Exchange.Exchange .. Main.Exchange.DataProcessors.Manager
Main.Exchange.Exchange .. Main.Exchange.Procedures.Manager

Main.Exchange.DataProcessors.Processor *-- "one" Main.Exchange.DataProcessors.Results.Result
Main.Exchange.DataProcessors.Processor *-- "one" Main.Exchange.Procedures.Procedure
Main.Exchange.Procedures.Procedure *-- "many" Main.Exchange.Participants.Participant
Main.Exchange.Participants.Participant *-- "Many" Main.Exchange.Participants.Data.Data

@enduml