@startuml

namespace Main.Exchange.DataProcessors #BBB {
    class Collector {
        +__construct(Procedure $procedure)
        +collectData() : CollectedData
    }

    class Matcher {
        +__construct(Procedure $procedure, ProcedureItemsMap $map, ProcedureData $data)
        +matchItems(CollectedData $newData) : MatchedData
    }

    class Combiner {
        +__construct(Procedure $procedure, ProcedureData $data)
        +combineItems(MatchedData $data) : CombinedData
    }

    class Provider {
        +__construct(Procedure $procedure, ProcedureItemsMap $map)
        +provideData(CombinedData $data) : ProviderResult
    }

    class ProcedureItemsMap {
        +__construct(Procedure $procedure)
        +getItemsIdArray() : int[]
        +getItemId(Participant $participant, int $commonItemId) : string
        +getItemCommonId(Participant $participant, string $itemId) : int
        +setParticipantItem(int $commonItemId, Participant $participant, string $itemId) : void
        +createNewItem(Participant $participant, string $itemId) : int
    }

    class ProcedureData {
        +__construct(Procedure $procedure)
        +getItemsIdArray() : int[]
        +getData(int $commonItemId, ProcedureField $field) : mixed
    }
    /' ------------------------------------------- '/
    /' ----------------- Results ----------------- '/
    /' ------------------------------------------- '/
    namespace Results #FFF {
        /' ---------------------------- '/
        /' ------- CollectedData ------ '/
        /' ---------------------------- '/
        class CollectedData < extends Main.Data.MapData > {
            +set(Participants.Participant $key, Participants.Data.ProvidedData $value) : void
            +get(Participants.Participant $key) : ?Participants.Data.ProvidedData
        }

        note bottom of CollectedData
        [
            Participant =>
            [
                itemData,
                itemData,
                itemData
            ],
            Participant =>
            [
                itemData,
                itemData,
                itemData
            ]
        ]
        endnote
        /' ---------------------------- '/
        /' ------- MatchedData ------ '/
        /' ---------------------------- '/
        class MatchedData < extends Main.Data.QueueData > {
            +pop() : Data.MatchedItem
            +push(Data.MatchedItem $data) : void
        }

        note bottom of MatchedData
        [
            commonItemId =>
            [
                Participant => itemData,
                Participant => itemData,
                Participant => itemData
            ],
            commonItemId =>
            [
                Participant => itemData,
                Participant => itemData,
                Participant => itemData
            ]
        ]
        endnote
        /' ---------------------------- '/
        /' ------- CombinedData ------- '/
        /' ---------------------------- '/
        class CombinedData < extends Main.Data.QueueData > {
            +pop() : Data.CombinedItem
            +push(Data.CombinedItem $data) : void
        }

        note bottom of CombinedData
        [
            commonItemId => commonItemData,
            commonItemId => commonItemData,
            commonItemId => commonItemData
        ]
        endnote
        /' ---------------------------- '/
        /' ------ ProviderResult ------ '/
        /' ---------------------------- '/
        class ProviderResult < extends Main.Data.MapData > {
            +set(Participants.Participant $key, bool $value) : void
            +get(Participants.Participant $key) : bool
        }
    }
    /' ------------------------------------------- '/
    /' ------------------ Data ------------------- '/
    /' ------------------------------------------- '/
    namespace Data #FFF {
        class MatchedItem < extends Main.Data.MapData > {
            +set(Participants.Participant $key, Participants.Data.ItemData $value) : void
            +get(Participants.Participant $key) : ?Participants.Data.ItemData
        }

        class CombinedItem < extends Main.Data.MapData > {
            +set(Procedures.Fields.ProcedureField $key, mixed $value) : void
            +get(Procedures.Fields.ProcedureField $key) : mixed
        }
    }
    /' ------------------------------------------- '/
    /' ---------------- Relations ---------------- '/
    /' ------------------------------------------- '/
    Collector   *-- Main.Exchange.DataProcessors.Results.CollectedData
    Matcher     *-- Main.Exchange.DataProcessors.Results.MatchedData
    Combiner    *-- Main.Exchange.DataProcessors.Results.CombinedData
    Provider    *-- Main.Exchange.DataProcessors.Results.ProviderResult

    Main.Exchange.DataProcessors.Results.MatchedData    o-- Main.Exchange.DataProcessors.Data.MatchedItem
    Main.Exchange.DataProcessors.Results.CombinedData   o-- Main.Exchange.DataProcessors.Data.CombinedItem

    Matcher     *-- ProcedureItemsMap
    Matcher     *-- ProcedureData
    Combiner    *-- ProcedureData
}

@enduml