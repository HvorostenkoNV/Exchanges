@startuml

namespace Main.Exchange.Participants #BBB {
    interface Participant {
        +getCode() : string
        +getFields() : Fields.FieldsSet
        +getProvidedData() : Data.ProvidedData
        +deliveryData(Data.DataForDelivery $data) : bool
    }

    abstract AbstractParticipant {
        -{abstract}readProvidedData() : array
        -{abstract}provideDataForDelivery(Data.DataForDelivery $data) : bool
    }

    class Users1C {

    }

    class UsersAD {

    }

    class UsersBitrix {

    }
    /' ------------------------------------------- '/
    /' ----------------- Fields ------------------ '/
    /' ------------------------------------------- '/
    namespace Fields #FFF {
        class FieldsSet <extends Main.Data.SetData> {
            +current() : Field|null
            +delete(Field $object) : void
            +push(Field $object) :void, throws InvalidArgumentException
            +findField(string $fieldName) : Field
        }

        class Field {
            +__construct(Main.Exchange.Participants.Participant $participant, Main.Data.Map $params) : throws InvalidArgumentException
            +getParticipant() : Main.Exchange.Participants.Participant
            +getFieldType() : Main.Exchange.Participants.FieldsTypes.Field
            +getParam(string $param) : mixed
        }
    }
    /' ------------------------------------------- '/
    /' --------------- FieldsTypes --------------- '/
    /' ------------------------------------------- '/
    namespace FieldsTypes #FFF {
        interface Field {
            +validateValue(mixed $value) : mixed, throws Exceptions.InvalidValueException
            +convertValueForPrint(mixed $value) : mixed, throws Exceptions.InvalidValueException
            +getRandomValue() : mixed
        }

        abstract AbstractField {

        }

        class String {

        }

        class Number {

        }
        /' ---------------------------- '/
        /' -------- Exceptions -------- '/
        /' ---------------------------- '/
        namespace Exceptions #EEE {
            class InvalidValueException <extends InvalidArgumentException> << (E, #CC0000) Exception >> {

            }
        }
    }
    /' ------------------------------------------- '/
    /' ------------------ Data ------------------- '/
    /' ------------------------------------------- '/
    namespace Data #FFF {
        interface Data <extends Main.Data.Queue> {
            +pop() : ItemData, throws Main.Data.Exceptions.EmptyQueueException
            +push(ItemData $data) : void, throws InvalidArgumentException
        }

        class ProvidedData {

        }

        class DataForDelivery {

        }

        class ItemData < extends Main.Data.MapData > {
            +get(Main.Exchange.Participants.Fields.Field $key) : mixed
            +set(Main.Exchange.Participants.Fields.Field $key, mixed $value) : void, throws InvalidArgumentException
        }
    }
    /' ------------------------------------------- '/
    /' ---------------- Exceptions --------------- '/
    /' ------------------------------------------- '/
    namespace Exceptions #EEE {
        class UnknownParticipantException <extends Exception> << (E, #CC0000) Exception >> {

        }

        class UnknownParticipantFieldException <extends Exception> << (E, #CC0000) Exception >> {

        }
    }
    /' ------------------------------------------- '/
    /' ---------------- Relations ---------------- '/
    /' ------------------------------------------- '/
    Participant         <|--    AbstractParticipant
    AbstractParticipant <|--    Users1C
    AbstractParticipant <|--    UsersAD
    AbstractParticipant <|--    UsersBitrix

    Main.Exchange.Participants.Participant  o-- Main.Exchange.Participants.Data.Data
    Main.Exchange.Participants.Participant  o-- Main.Exchange.Participants.Fields.FieldsSet

    Main.Exchange.Participants.Fields.FieldsSet             o--     Main.Exchange.Participants.Fields.Field
    Main.Exchange.Participants.Fields.Field                 o--     Main.Exchange.Participants.FieldsTypes.Field
    Main.Exchange.Participants.FieldsTypes.Field            <|--    Main.Exchange.Participants.FieldsTypes.AbstractField
    Main.Exchange.Participants.FieldsTypes.AbstractField    <|--    Main.Exchange.Participants.FieldsTypes.String
    Main.Exchange.Participants.FieldsTypes.AbstractField    <|--    Main.Exchange.Participants.FieldsTypes.Number

    Main.Exchange.Participants.Data.Data        o--     Main.Exchange.Participants.Data.ItemData
    Main.Exchange.Participants.Data.Data        <|--    Main.Exchange.Participants.Data.ProvidedData
    Main.Exchange.Participants.Data.Data        <|--    Main.Exchange.Participants.Data.DataForDelivery
    Main.Exchange.Participants.Data.ItemData    o--     Main.Exchange.Participants.Fields.Field

    Main.Exchange.Participants.AbstractParticipant                      -[hidden]   Main.Exchange.Participants.Fields.FieldsSet
    Main.Exchange.Participants.Fields.FieldsSet                         -[hidden]   Main.Exchange.Participants.Data.Data
    Main.Exchange.Participants.Data.ItemData                            -[hidden]   Main.Exchange.Participants.Data.ProvidedData
    Main.Exchange.Participants.Data.ProvidedData                        -[hidden]   Main.Exchange.Participants.Data.DataForDelivery
    Main.Exchange.Participants.Exceptions.UnknownParticipantException   --[hidden]  Main.Exchange.Participants.Exceptions.UnknownParticipantFieldException
    Main.Exchange.Participants.Exceptions.UnknownParticipantException   --[hidden]  Main.Exchange.Participants.Data.Data
}

@enduml