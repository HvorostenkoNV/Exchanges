@startuml

namespace Main.Exchange.Procedures #BBB {
    class Manager {
        +{static}getProcedures(Main.Data.Map $filter = null) : Data.ProceduresSet
    }

    interface Procedure {
        +getCode() : string
        +getParticipants() : Data.ParticipantsSet
        +getFields() : Fields.FieldsSet
        +getDataMatchingRules() : Rules.DataMatchingRules
        +getDataCombiningRules() : Rules.DataCombiningRules
    }

    abstract AbstractProcedure {
        +getCode() : string
        +getParticipants() : Data.ParticipantsSet
        +getFields() : Fields.FieldsSet
        +getDataMatchingRules() : Rules.DataMatchingRules
        +getDataCombiningRules() : Rules.DataCombiningRules
    }

    class UsersExchange {

    }
    /' ------------------------------------------- '/
    /' ------------------ Data ------------------- '/
    /' ------------------------------------------- '/
    namespace Data #FFF {
        class ParticipantsSet < extends Main.Data.SetData > {
            +current() : ?Participants.Participant
            +delete(Participants.Participant $object) : void
            +push(Participants.Participant $object) :void
        }

        class ProceduresSet < extends Main.Data.SetData > {
            +current() : ?Procedures.Procedure
            +delete(Procedures.Procedure $object) : void
            +push(Procedures.Procedure $object) :void
        }
    }
    /' ------------------------------------------- '/
    /' ----------------- Fields ------------------ '/
    /' ------------------------------------------- '/
    namespace Fields #FFF {
        class ParticipantField {
            +__construct(Participants.Participant $participant, Participants.Fields.Field $field)
            +getParticipant() : Participants.Participant
            +getField() : Participants.Fields.Field
        }

        class ProcedureField < extends Main.Data.SetData > {
            +current() : ?ParticipantField
            +delete(ParticipantField $object) : void
            +push(ParticipantField $object) :void
        }

        class FieldsSet < extends Main.Data.SetData > {
            +current() : ?ProcedureField
            +delete(ProcedureField $object) : void
            +push(ProcedureField $object) :void
        }

        FieldsSet       o-- ProcedureField
        ProcedureField  o-- ParticipantField
    }
    /' ------------------------------------------- '/
    /' ------------------ Rules ------------------ '/
    /' ------------------------------------------- '/
    namespace Rules #FFF {
        class DataMatchingRules < extends Main.Data.MapData > {
            +set(Fields.ParticipantField $key, Fields.FieldsSet $value) : void
            +get(Fields.ParticipantField $key) : Fields.FieldsSet
        }

        class DataCombiningRules < extends Main.Data.MapData > {
            +set(Participants.Fields.Field $key, int $value) : void
            +get(Participants.Fields.Field $key) : int
        }
    }
    /' ------------------------------------------- '/
    /' ---------------- Relations ---------------- '/
    /' ------------------------------------------- '/
    Manager             -       Procedure
    Procedure           <|--    AbstractProcedure
    AbstractProcedure   <|--    UsersExchange

    Manager     o-- Main.Exchange.Procedures.Data.ProceduresSet
    Procedure   o-- Main.Exchange.Procedures.Data.ParticipantsSet
    Procedure   o-- Main.Exchange.Procedures.Fields.FieldsSet
    Procedure   o-- Main.Exchange.Procedures.Rules.DataMatchingRules
    Procedure   o-- Main.Exchange.Procedures.Rules.DataCombiningRules
}

@enduml